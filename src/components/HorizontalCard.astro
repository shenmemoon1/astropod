---
const { title, cover, desc, url, audioUrl, id, pubDate, duration } =
  Astro.props;

import astropodConfig from "../../.astropod/astropod.config.json";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
dayjs.extend(localizedFormat);
import PlayIcon from "./icons/playIcon.astro";
import PauseIcon from "./icons/pauseIcon.astro";

let cover_url = cover ? cover : astropodConfig.cover;
const displayDate = dayjs(pubDate).format("ll");

function formatTime(secs) {
  if (isNaN(secs) || secs < 0) {
    const segmentedTime = secs.split(":");
    return segmentedTime[0] == "00" || segmentedTime[0] == "0" ? secs : null;
  }

  const hours = Math.floor(secs / 3600);
  const minutes = Math.floor((secs % 3600) / 60);
  const seconds = Math.floor(secs % 60);
  const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
  const formattedseconds = seconds < 10 ? `0${seconds}` : seconds;

  return hours > 0
    ? `${hours}:${formattedMinutes}:${formattedseconds}`
    : `${minutes}:${formattedseconds}`;
}

const displayDuration = formatTime(duration);
---

<div class="episode-card">
  <div class="song-list">
    <div id="loading-indicator" class="hidden">
      <svg class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3159" width="32" height="32"><path d="M876.864 782.592c3.264 0 6.272-3.2 6.272-6.656 0-3.456-3.008-6.592-6.272-6.592-3.264 0-6.272 3.2-6.272 6.592 0 3.456 3.008 6.656 6.272 6.656z m-140.544 153.344c2.304 2.432 5.568 3.84 8.768 3.84a12.16 12.16 0 0 0 8.832-3.84 13.76 13.76 0 0 0 0-18.56 12.224 12.224 0 0 0-8.832-3.84 12.16 12.16 0 0 0-8.768 3.84 13.696 13.696 0 0 0 0 18.56zM552.32 1018.24c3.456 3.648 8.32 5.76 13.184 5.76a18.368 18.368 0 0 0 13.184-5.76 20.608 20.608 0 0 0 0-27.968 18.368 18.368 0 0 0-13.184-5.824 18.368 18.368 0 0 0-13.184 5.76 20.608 20.608 0 0 0 0 28.032z m-198.336-5.76c4.608 4.8 11.072 7.68 17.6 7.68a24.448 24.448 0 0 0 17.536-7.68 27.456 27.456 0 0 0 0-37.248 24.448 24.448 0 0 0-17.536-7.68 24.448 24.448 0 0 0-17.6 7.68 27.52 27.52 0 0 0 0 37.184z m-175.68-91.84c5.76 6.08 13.824 9.6 21.952 9.6a30.592 30.592 0 0 0 22.016-9.6 34.368 34.368 0 0 0 0-46.592 30.592 30.592 0 0 0-22.016-9.6 30.592 30.592 0 0 0-21.952 9.6 34.368 34.368 0 0 0 0 46.592z m-121.152-159.36c6.912 7.36 16.64 11.648 26.368 11.648a36.736 36.736 0 0 0 26.432-11.584 41.28 41.28 0 0 0 0-55.936 36.736 36.736 0 0 0-26.432-11.584 36.8 36.8 0 0 0-26.368 11.52 41.28 41.28 0 0 0 0 56zM12.736 564.672a42.88 42.88 0 0 0 30.784 13.44 42.88 42.88 0 0 0 30.784-13.44 48.128 48.128 0 0 0 0-65.216 42.88 42.88 0 0 0-30.72-13.44 42.88 42.88 0 0 0-30.848 13.44 48.128 48.128 0 0 0 0 65.216z m39.808-195.392a48.96 48.96 0 0 0 35.2 15.36 48.96 48.96 0 0 0 35.2-15.36 54.976 54.976 0 0 0 0-74.56 48.96 48.96 0 0 0-35.2-15.424 48.96 48.96 0 0 0-35.2 15.424 54.976 54.976 0 0 0 0 74.56zM168.32 212.48c10.368 11.008 24.96 17.408 39.68 17.408 14.592 0 29.184-6.4 39.552-17.408a61.888 61.888 0 0 0 0-83.84 55.104 55.104 0 0 0-39.616-17.408c-14.656 0-29.248 6.4-39.616 17.408a61.888 61.888 0 0 0 0 83.84zM337.344 124.8c11.52 12.16 27.712 19.264 43.968 19.264 16.256 0 32.448-7.04 43.968-19.264a68.672 68.672 0 0 0 0-93.184 61.248 61.248 0 0 0-43.968-19.264 61.248 61.248 0 0 0-43.968 19.264 68.736 68.736 0 0 0 0 93.184z m189.632-1.088c12.672 13.44 30.528 21.248 48.448 21.248s35.712-7.808 48.384-21.248a75.584 75.584 0 0 0 0-102.464A67.392 67.392 0 0 0 575.36 0c-17.92 0-35.776 7.808-48.448 21.248a75.584 75.584 0 0 0 0 102.464z m173.824 86.592c13.824 14.592 33.28 23.104 52.736 23.104 19.584 0 39.04-8.512 52.8-23.104a82.432 82.432 0 0 0 0-111.744 73.472 73.472 0 0 0-52.8-23.168c-19.52 0-38.912 8.512-52.736 23.168a82.432 82.432 0 0 0 0 111.744z m124.032 158.528c14.976 15.872 36.032 25.088 57.216 25.088 21.12 0 42.24-9.216 57.152-25.088a89.344 89.344 0 0 0 0-121.088 79.616 79.616 0 0 0-57.152-25.088c-21.184 0-42.24 9.216-57.216 25.088a89.344 89.344 0 0 0 0 121.088z m50.432 204.032c16.128 17.088 38.784 27.008 61.632 27.008 22.784 0 45.44-9.92 61.568-27.008a96.256 96.256 0 0 0 0-130.432 85.76 85.76 0 0 0-61.568-27.072c-22.848 0-45.44 9.984-61.632 27.072a96.192 96.192 0 0 0 0 130.432z" fill="#262626" p-id="3160"></path></svg>
    </div>
    <!-- <div class="hero-content flex-row">
    <a href={url} class="min-w-fit">
      <img src={cover_url} alt={title} class="shadow-lg rounded-md w-[4.5rem] h-[4.5rem] md:w-24 md:h-24" />
    </a>
    <div class="grow w-full overflow-auto">
      <a href={url}>
        <h2 class="md:text-xl text-sm font-semibold truncate">
          {title}
        </h2>
        <p class="text-xs font-medium opacity-60">
          {displayDuration && displayDuration + " • "}
          {displayDate}
        </p>
        <p class="my-1 text-xs md:text-sm line-clamp-2">{desc}</p>
      </a>
    </div>
    <label class="btn btn-circle md:mx-2 swap">
      <input type="checkbox" class="card-pay-buttons" id={id} data-audio-url={audioUrl} aria-label="Play and pause" />
      <div class="swap-off">
        <PlayIcon />
      </div>
      <div class="swap-on">
        <PauseIcon />
      </div>
    </label>
  </div>
  <hr class="my-3 border-base-content opacity-[.15]" /> -->
  </div>

  <style>
    .episode-card:last-child hr {
      display: none;
    }
    #loading-indicator {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      /* background-color: rgba(255, 255, 255, 0.8); */
      padding: 20px;
      border-radius: 8px;
      /* box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2); */
      z-index: 9999;
      /* 添加旋转动画，持续时间为2秒，无限循环 */
  animation: rotate 2s linear infinite;
    }
    @keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
  </style>

  <script>
    // 在全局范围内创建一个音频元素
    const audioElement = new Audio();
    const loadingIndicator = document.getElementById('loading-indicator');
    const fetchData = async () => {
      try {
        // 显示加载状态
        loadingIndicator.classList.remove('hidden');
        const response = await fetch(
          "https://autumnfish.cn/search?keywords=罗言"
        );
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        const data = await response.json();
        const randomSome = data.result.songs;

        // Get a reference to the song list container
        const songListContainer = document.querySelector(".song-list");

        // Create a document fragment to reduce reflows when adding elements
        const fragment = document.createDocumentFragment();

        randomSome.forEach((song) => {
          const songCard = document.createElement("div");
          songCard.classList.add("episode-card");

          // console.log(song.album);

          // Create the HTML structure for each song card
          songCard.innerHTML = `
        <div class="hero-content flex-row">
          <div class="min-w-fit">
            <img src="https://getastropod.netlify.app/cover.jpg" alt="${
              song.name
            }" class="shadow-lg rounded-md w-[4.5rem] h-[4.5rem] md:w-24 md:h-24" />
          </div>
          <div class="grow w-full overflow-auto">
            <div>
              <h2 class="md:text-xl text-sm font-semibold truncate">${
                song.name
              }</h2>
              <p class="text-xs font-medium opacity-60">
                ${song.duration ? song.duration + " • " : ""}${
            song.album.copyrightId
          }
              </p>
              <p class="my-1 text-xs md:text-sm line-clamp-2">${
                song.album.name
              }</p>
            </div>
          </div>
          <label class="btn btn-circle md:mx-2 swap">
            <input type="checkbox" class="card-pay-buttons" data-song-id="${
              song.id
            }" aria-label="Play and pause" />
            <div class="swap-off">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="icon icon-tabler icon-tabler-player-play-filled"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
                >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path
                  d="M6 4v16a1 1 0 0 0 1.524 .852l13 -8a1 1 0 0 0 0 -1.704l-13 -8a1 1 0 0 0 -1.524 .852z"
                  stroke-width="0"
                  fill="currentColor"></path>
                </svg>
            </div>
            <div class="swap-on">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="icon icon-tabler icon-tabler-player-play-filled"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
                >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path
                  d="M6 4v16a1 1 0 0 0 1.524 .852l13 -8a1 1 0 0 0 0 -1.704l-13 -8a1 1 0 0 0 -1.524 .852z"
                  stroke-width="0"
                  fill="currentColor"></path>
                </svg>
            </div>
          </label>
        </div>
        <hr class="my-3 border-base-content opacity-[.15]" />
      `;

          // Add a click event listener to the play button
          // Add a click event listener to the play button
          const playButton = songCard.querySelector(".card-pay-buttons");
          playButton.addEventListener("click", async () => {
            const songId = playButton.getAttribute("data-song-id");

            try {
              // 如果当前有歌曲正在播放，先停止它
              if (!audioElement.paused) {
                audioElement.pause();
              }

              // Fetch the song's audio URL using the song ID
              const audioResponse = await fetch(
                `https://autumnfish.cn/song/url?id=${songId}`
              );
              if (!audioResponse.ok) {
                throw new Error("Failed to fetch audio URL");
              }
              const audioData = await audioResponse.json();
              const audioUrl = audioData.data[0].url;

              // 设置新的音频源并播放
              audioElement.src = audioUrl;
              audioElement.play();
            } catch (error) {
              console.error(error);
            }
          });

          // Append the song card to the fragment
          fragment.appendChild(songCard);
        });

        // Append the fragment to the song list container
        songListContainer.appendChild(fragment);
        // 隐藏加载状态
        loadingIndicator.classList.add('hidden');
      } catch (error) {
        console.error(error);
      }
    };

    // Call the fetchData function to populate the song list
    fetchData();
  </script>
</div>
